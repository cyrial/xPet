from display_manager import tftfrom sound_manager import play_soundimport utimeimport randomimport configimport characterimport objects# WE NEED TO DEFINE TOP LEFT POSITION AND BOTTOM RIGHT POSITION SO WE CAN CALCULATE BOUNDARIES#    x,y,width,height# CURRENT LEFTCH_X = 45# CURRENT TOPCH_Y = config.GROUND - character.HEIGHTPOO_ANIM_STEP = 1def hatching(count):  tft.clear()    for x in range(0, count):    tft.image(0, 0, "images/hatch/1-1.jpg")    utime.sleep(0.5)    tft.image(0, 0, "images/hatch/1-2.jpg")    utime.sleep(0.5)      tft.image(0,0, "images/hatch/1-3.jpg")    play_sound('hatched')  tft.image(0,0, "images/hatch/1-4.jpg")  utime.sleep(2)  tft.clear(tft.WHITE)def reset_center():  tft.rect(0, 25, 160, 53, tft.WHITE, tft.WHITE)def idle():    number = random.randint(0,1)        if number == 0:        for x in range (random.randint(6,13)):            move_right()                        if objects.POO == 1:                animate_poo(POO_ANIM_STEP)    else:        for x in range (random.randint(6,13)):            move_left()                        if objects.POO == 1:                animate_poo(POO_ANIM_STEP)            def move_right():    global CH_X, CH_Y        if (CH_X + config.STEP) < config.MAX_WIDTH:        CH_X += config.STEP        character.draw(CH_X, CH_Y)        # Put white background after chracter move        tft.rect(CH_X - config.STEP, CH_Y, config.STEP, character.HEIGHT, tft.WHITE, tft.WHITE)    utime.sleep(config.ANIMATION_TIME)def move_left():    global CH_X, CH_Y    if (CH_X - config.STEP) > config.MIN_WIDTH:        CH_X -= config.STEP        character.draw(CH_X,CH_Y)        tft.rect(CH_X + character.WIDTH, CH_Y, config.STEP, character.HEIGHT, tft.WHITE, tft.WHITE)    utime.sleep(config.ANIMATION_TIME)def animate_poo(step):  global POO_ANIM_STEP    objects.draw_poo(POO_ANIM_STEP)    if POO_ANIM_STEP < 3:    POO_ANIM_STEP += 1  else:    POO_ANIM_STEP = 1